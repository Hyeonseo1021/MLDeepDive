from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.chrome.service import Service
from selenium.webdriver.chrome.options import Options
import time
import pandas as pd
from itertools import chain


# 크롬 옵션 설정
options = Options()
options.add_argument("--incognito")
# options.add_argument("--headless")  # 필요 시 백그라운드 실행

# 크롬 드라이버 경로 설정
driver_path = "C:/chromedriver-win64/chromedriver.exe"
driver = webdriver.Chrome(service=Service(driver_path), options=options)

# 연도와 월 반복
years = range(2020, 2025)   # 2020년부터 2024년까지
months = range(3, 11)       # 3월부터 10월까지

for year in years:
    for month in months:
        try:
            # URL 생성 (연도와 월을 동적으로 변경)
            url = f'https://tigers.co.kr/game/schedule/major/{year}{month:02d}'
            driver.get(url)
            time.sleep(3)

            # 경기 일정 셀 전체 탐색
            calendar_cells = driver.find_elements(By.CSS_SELECTOR, "table tbody tr td")

            for index in range(len(calendar_cells)):
                try:
                    # 매번 요소 재탐색
                    calendar_cells = driver.find_elements(By.CSS_SELECTOR, "table tbody tr td")
                    cell = calendar_cells[index]

                    date_text = cell.text.strip()

                    # 날짜 셀이 비어있으면 건너뜀
                    if not date_text:
                        continue

                    # 취소된 경기 확인
                    cancel_elements = cell.find_elements(By.XPATH, ".//p[2]/strong/em")
                    if cancel_elements and cancel_elements[0].text == "취":
                        print(f"{year}-{month:02d}-{date_text} - 경기 취소됨")
                        continue

                    # 홈팀 여부 확인
                    home_team = "KIA" if "home" in cell.get_attribute("class") else ""

                    # 상대팀 이름 추출
                    opp_team_img = cell.find_elements(By.TAG_NAME, 'img')
                    opp_team = opp_team_img[0].get_attribute('alt') if opp_team_img else "상대팀 이미지 없음"

                    # 경기 셀 클릭
                    clickable_element = cell.find_elements(By.XPATH, ".//p[2]")
                    if clickable_element:
                        clickable_element[0].click()
                        time.sleep(2)

                        # 점수 추출
                        left_score = int(driver.find_element(By.XPATH, '//*[@id="root"]/div/div[2]/div/section[1]/div[1]/div/div/div[2]/strong[1]').text)
                        right_score = int(driver.find_element(By.XPATH, '//*[@id="root"]/div/div[2]/div/section[1]/div[1]/div/div/div[2]/strong[2]').text)


                        # 경기 결과 출력
                        print(f"경기일: {year}-{month:02d}-{date_text}")
                        print(f"홈 팀: {home_team}")
                        print(f"상대 팀: {opp_team}")
                        if home_team =="KIA":
                            print(f"기아 점수: {right_score}")
                        else:
                            print(f"기아 점수: {left_score}")

                        articles = driver.find_elements(By.TAG_NAME, 'article')

                        for article in articles:
                            team_name = article.find_element(By.CSS_SELECTOR, "h3 span").text
                            record_type = article.find_element(By.TAG_NAME, 'h3').text

                            # 타격 결과에 대한 분류 매핑 단어 더 넣어달라고 하기
                            result_mapping = {
                                '삼진': '삼진',
                                '4구': '볼넷',
                                '우희비': '실책', '좌희비': '실책', '유희비': '실책',
                                '중안': '안타', '우안': '안타', '좌안': '안타', '2안': '안타', '3안': '안타', '우중안': '안타', '좌중안': '안타',
                                '우홈': '홈런', '좌홈': '홈런', '중홈': '홈런',
                                '유병': '병살타', '4-6-3 병살': '병살타', '1병': '병살타', '병살': '병살타'
                            }


                            if team_name == "KIA" and '타자 기록' in record_type:
                                batter_table = article.find_element(By.CLASS_NAME, 'headDark')
                                headers = batter_table.find_elements(By.TAG_NAME, 'th')
                                
                                
                                first_header = [header.text.strip() for header in headers[1:10]]
                                second_header = [header.text.strip() for header in headers[16:19]]
                                
                                header_data = first_header + second_header 

                                rows = batter_table.find_elements(By.CSS_SELECTOR, "tbody tr")
                                batter_data = []

                                for i, row in enumerate(rows):
                                    cells = row.find_elements(By.TAG_NAME, 'td')
                                    if len(cells) >= 15:
                                        first_data = [cell.text.strip() for cell in cells[1:10]]
                                        batter_data.append(first_data)
                                        if i == len(rows) - 1:
                                            second_data = [cell.text.strip() for cell in cells[15:18]]
                                            batter_data.append(second_data)
                                        
                                        # 데이터프레임 생성
                                df = pd.DataFrame(batter_data, columns=header_data)
                                
                                for column in first_header:
                                    if column in df.columns:  # 해당 열이 데이터프레임에 있는 경우에만 매핑 적용
                                        df[column] = df[column].map(lambda x: result_mapping.get(x, x))  # 타격 결과만 매핑
                                
                                # 타격 결과별 카운트를 위한 함수
                                def count_results(row, header_type):
                                    counts = {
                                        '삼진': 0,
                                        '볼넷': 0,
                                        '실책': 0,
                                        '안타': 0,
                                        '홈런': 0,
                                        '병살타': 0,
                                        '타수' : 0,
                                        '타점' : 0
                                    }

                                    if header_type == 'first':
                                      for result in row:
                                        if result in counts:
                                            counts[result] += 1
                                    
                                    elif header_type == 'second':
                                        for result in row:
                                            if result in counts:
                                                counts[result] += int(result) if result.isdigit() else 0
                                    return pd.Series(counts)

                                result_first = df[first_header].apply(lambda row: count_results(row, 'first'), axis=1)    
                                result_second = df[second_header].apply(lambda row: count_results(row, 'second'), axis=1)

                                # 타격 결과와 통계를 합친 데이터
                                final_df = pd.concat([result_first, result_second], axis=1)
                                final_df_sum = final_df.sum(axis=0)
                                final_df = pd.DataFrame([final_df_sum], columns=final_df.columns)

                                print(f"{team_name}의 타자 기록")
                                print(final_df)
                               # print(f"{team_name}의 타자 기록: {header_text} \n {batter_data}")

                            elif team_name == opp_team and '타자 기록' in record_type:
                                batter_table = article.find_element(By.CLASS_NAME, 'headDark')
                                headers = batter_table.find_elements(By.TAG_NAME, 'th')
                                header_text = [header.text.strip() for header in headers[1:10]]

                                rows = batter_table.find_elements(By.CSS_SELECTOR, "tbody tr")
                                batter_data = []

                                for row in rows:
                                    cells = row.find_elements(By.TAG_NAME, 'td')
                                    if len(cells) >= 10:
                                        row_data = [cell.text.strip() for cell in cells[1:10]]
                                        batter_data.append(row_data)

                                df = pd.DataFrame(batter_data, columns=header_text)

                                # 이닝별 타격 결과를 매핑된 값으로 변환
                                df_mapped = df.map(lambda x: result_mapping.get(x, '') if pd.notnull(x) else '')

                                # 타격 결과별 카운트를 위한 함수
                                def count_results(row):
                                    counts = {
                                        '삼진': 0,
                                        '볼넷': 0,
                                        '실책': 0,
                                        '안타': 0,
                                        '홈런': 0,
                                        '병살타': 0
                                    }
                                    for result in row:
                                        if result in counts:
                                            counts[result] += 1
                                    return pd.Series(counts)
                                
                                # 각 행별로 타격 결과 카운트 계산
                                result_counts = df_mapped.apply(count_results, axis=1)

                                final_counts = result_counts.sum()
                                final_df = pd.DataFrame([final_counts])

                                print(f"{team_name}의 타자 기록")
                                print(final_df)

                            elif team_name == "KIA" and '투수 기록' in record_type:
                                pitcher_table = article.find_element(By.CSS_SELECTOR, ".table_Typ01.mbScroll.mbThNofix")
                                headers = pitcher_table.find_elements(By.TAG_NAME, 'th')
                                header_text = [header.text.strip() for header in headers[12:16]]

                                rows = pitcher_table.find_elements(By.CSS_SELECTOR, "tbody tr")
                                pitcher_data = []

                                for row in rows:
                                    cells = row.find_elements(By.TAG_NAME, 'td')
                                    if len(cells) >= 10:
                                        row_data = [cell.text.strip() for cell in cells[11:]]
                                        pitcher_data.append(row_data)
                                    
                                df = pd.DataFrame(pitcher_data, columns=header_text)

                                numeric_columns = ['삼진', '실점', '자책']
                                df[numeric_columns] = df[numeric_columns].astype(int)

                                df['ERA'] = df['ERA'].astype(float)

                                def aggregate_pitcher_data(df):
                                    aggregated_data = df[numeric_columns].sum()
                                    aggregated_era = df['ERA'].mean()
                                    aggregated_data['ERA'] = round(aggregated_era, 2)
                                    return aggregated_data
                                
                                aggregated_data = aggregate_pitcher_data(df)

                                final_df = pd.DataFrame([aggregated_data], columns=header_text)

                                print(f'{team_name}의 투수 기록')
                                print(final_df)

                            elif team_name == opp_team and '투수 기록' in record_type:
                                pitcher_table = article.find_element(By.CSS_SELECTOR, ".table_Typ01.mbScroll.mbThNofix")
                                headers = pitcher_table.find_elements(By.TAG_NAME, 'th')
                                header_text = [header.text.strip() for header in headers[12:16]]

                                rows = pitcher_table.find_elements(By.CSS_SELECTOR, "tbody tr")
                                pitcher_data = []

                                for row in rows:
                                    cells = row.find_elements(By.TAG_NAME, 'td')
                                    if len(cells) >= 10:
                                        row_data = [cell.text.strip() for cell in cells[11:]]
                                        pitcher_data.append(row_data)

                                df = pd.DataFrame(pitcher_data, columns=header_text)

                                numeric_columns = ['삼진', '실점', '자책']
                                df[numeric_columns] = df[numeric_columns].astype(int)

                                df['ERA'] = df['ERA'].astype(float)

                                def aggregate_pitcher_data(df):
                                    aggregated_data = df[numeric_columns].sum()
                                    aggregated_era = df['ERA'].mean()
                                    aggregated_data['ERA'] = round(aggregated_era, 2)
                                    return aggregated_data
                                
                                aggregated_data = aggregate_pitcher_data(df)

                                final_df = pd.DataFrame([aggregated_data], columns=header_text)

                                print(f'{team_name}의 투수 기록')
                                print(final_df)
                                

                        # 뒤로 가기
                        driver.back()
                        time.sleep(2)

                except Exception as e:
                    print(f"오류 발생: {e}")
                    driver.back()
                    time.sleep(2)

        except Exception as e:
            print(f"페이지 로드 중 오류 발생: {e}")

# 드라이버 종료
driver.quit()
